 
===> 249/1/0rir.raku <===
1..7
ok 1 - Sorted Pairs    ((2, 2), (2, 2), (3, 3)) < $(3, 2, 3, 2, 2, 2)
ok 2 - Sorted Pairs    () < $(1, 2, 3, 4)
ok 3 - Sorted Pairs    ((1, 1), (2, 2), (2, 2), (3, 3), (3, 3), (3, 3), (4, 4)) < $(1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4)
ok 4 - Sorted Triplets () < $(3, 2, 3, 2, 2, 2)
ok 5 - Sorted Triplets ((2, 2, 2), (3, 3, 3)) < $(3, 3, 3, 2, 2, 2)
ok 6 - Sorted Triplets () < $(1, 2, 3, 4)
ok 7 - Sorted Triplets (1, 1, 1) < $(1, 1, 1)

Input: @int = (1 1 2 2 2 2 3 3 3 3 3 3 4 4)
Output: ((1, 1), (3, 3), (3, 3), (3, 3), (2, 2), (2, 2), (4, 4))
 
===> 249/1/arne-sommer.raku <===
(2, 2), (2, 2), (3, 3)
 
===> 249/1/athanasius.raku <===
Running the test suite
ok 1 - Example 1
ok 2 - Example 2
ok 3 - Negatives 1
ok 4 - Negatives 2
1..4
 
===> 249/1/barroff.raku <===
1..2
ok 1 - Works for (3, 2, 3, 2, 2, 2)
ok 2 - Works for (1, 2, 3, 4)
 
===> 249/1/bruce-gray.raku <===
1..9
ok 1 - task1_bag_unbag: 3 2 3 2 2 2
ok 2 - task1_bag_unbag: 1 2 3 4
ok 3 - task1_bag_unbag: 3 3 3 2 2 2
ok 4 - task1_check_pairs_equal: 3 2 3 2 2 2
ok 5 - task1_check_pairs_equal: 1 2 3 4
ok 6 - task1_check_pairs_equal: 3 3 3 2 2 2
ok 7 - task1_concise: 3 2 3 2 2 2
ok 8 - task1_concise: 1 2 3 4
ok 9 - task1_concise: 3 3 3 2 2 2
 
===> 249/1/laurent-rosenfeld.raku <===
3 2 3 2 2 2     => [(2 2) (2 2) (3 3)]
1 2 3 4         => ()
 
===> 249/1/lubos-kolouch.raku <===
[2 2 2 2 3 3]
[]
 
===> 249/1/luca-ferrari.raku <===
2 2
 
===> 249/1/mark-anderson.raku <===
ok 1 - 
ok 2 - 
 
===> 249/1/packy-anderson.raku <===
Example 1:
Input: @ints = (3, 2, 3, 2, 2, 2)
Output: (2, 2), (2, 2), (3, 3)

Example 2:
Input: @ints = (1, 2, 3, 4)
Output: ()

Example 3:
Input: @ints = (1, 2, 3, 4, 4, 3, 2, 1)
Output: (1, 1), (2, 2), (3, 3), (4, 4)
 
===> 249/1/roger-bell-west.raku <===
1..2
ok 1 - example 1
ok 2 - example 2
 
===> 249/1/ulrich-rieke.raku <===
(( 2 , 2 )( 2 , 2 )( 3 , 3 ))
 
===> 249/1/wambash.raku <===
ok 1 - 
ok 2 - 
1..2
