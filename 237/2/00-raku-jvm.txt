 
===> 237/2/0rir.raku <===
1..19
ok 1 - 0 <- in: 1
ok 2 - 0 <- in: 1 1 1 1
ok 3 - 1 <- in: 1 2
ok 4 - 2 <- in: 1 2 3
ok 5 - 1 <- in: 1 1 2
ok 6 - 3 <- in: 1 2 3 4
ok 7 - 1 <- in: 1 1 1 2
ok 8 - 1 <- in: 1 1 1 1 2
ok 9 - 2 <- in: 1 1 1 1 2 2
ok 10 - 3 <- in: 1 1 1 1 2 2 2
ok 11 - 4 <- in: 1 1 1 1 2 2 2 2
ok 12 - 4 <- in: 1 1 1 1 2 2 2 2 2
ok 13 - 4 <- in: 1 1 1 1 2 2 2 2 2 2 2
ok 14 - 4 <- in: 1 1 1 2 3 3 5
ok 15 - 4 <- in: 1 1 1 1 2 3 3 5
ok 16 - 6 <- in: 1 1 1 2 3 3 3 3 5 5
ok 17 - 5 <- in: 1 1 1 2 3 3 3 3 3 5
ok 18 - 6 <- in: 1 1 1 2 3 3 5 5 5 5
ok 19 - 7 <- in: 1 1 1 2 3 3 4 5 5 5 5

Input: @int =  [1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 5]
Output: 7
 
===> 237/2/arne-sommer.raku <===
7
 
===> 237/2/athanasius.raku <===
Running the test suite
ok 1 - Example 1: maximum greatness
ok 2 - Example 1: permutation
ok 3 - Example 2: maximum greatness
ok 4 - Example 2: permutation
ok 5 - Negatives: maximum greatness
ok 6 - Negatives: permutation
ok 7 - Mixed: maximum greatness
ok 8 - Mixed: permutation
1..8
 
===> 237/2/barroff.raku <===
1..2
ok 1 - works for (1, 3, 5, 2, 1, 3, 1)
ok 2 - works for (1, 2, 3, 4)
 
===> 237/2/bruce-gray.raku <===
1..12
ok 1 - permute__ 1 : 1 3 5 2 1 3 1
ok 2 - construct 1 : 1 3 5 2 1 3 1
ok 3 - con_show_ 1 : 1 3 5 2 1 3 1
ok 4 - permute__ 2 : 1 2 3 4
ok 5 - construct 2 : 1 2 3 4
ok 6 - con_show_ 2 : 1 2 3 4
ok 7 - permute__ 3 : 1 2 3 14
ok 8 - construct 3 : 1 2 3 14
ok 9 - con_show_ 3 : 1 2 3 14
ok 10 - permute__ 4 : 8 9 5 5 9 4 4 2
ok 11 - construct 4 : 8 9 5 5 9 4 4 2
ok 12 - con_show_ 4 : 8 9 5 5 9 4 4 2
 
===> 237/2/deadmarshal.raku <===
4
3
 
===> 237/2/jaldhar-h-vyas.raku <===
2
 
===> 237/2/lubos-kolouch.raku <===
1..2
ok 1 - Test Case 1
ok 2 - Test Case 2
 
===> 237/2/luca-ferrari.raku <===
Greatest 1 with 1 possible permutations
3,1,2
 
===> 237/2/mark-anderson.raku <===
ok 1 - 
ok 2 - 
ok 3 - 
ok 4 - 
ok 5 - 
 
===> 237/2/packy-anderson.raku <===
Example 1:
Input: @ints = (1, 3, 5, 2, 1, 3, 1)
Output: 4

One possible permutation: (2, 5, 1, 3, 3, 1, 1)
which returns 4 greatness as below:
nums[0] < perm[0]
nums[1] < perm[1]
nums[3] < perm[3]
nums[4] < perm[4]

Example 2:
Input: @ints = (1, 2, 3, 4)
Output: 3

One possible permutation: (2, 3, 4, 1)
which returns 3 greatness as below:
nums[0] < perm[0]
nums[1] < perm[1]
nums[2] < perm[2]
 
===> 237/2/polettix.raku <===
7
 
===> 237/2/rcmlz.raku <===
16
 
===> 237/2/robert-dicicco.raku <===
Input: @nums = [1 3 5 2 1 3 1]
Output: 4

Input: @nums = [1 2 3 4]
Output: 3

 
===> 237/2/roger-bell-west.raku <===
1..2
ok 1 - example 1
ok 2 - example 2
 
===> 237/2/ulrich-rieke.raku <===
2
 
===> 237/2/wambash.raku <===
