---------------------------------------------
The Good, the Bad and the Ugly of 'use v5.36'
---------------------------------------------

JK, almost all good, but here are some possible gotcha's...
(drawn from TWC code examples)

Common Issues
=============

subroutine signatures:
    sub foo(&@) ==> sub foo :prototype(&@)

classes:
    new Foo ==> Foo->new

bit-wise operators: 
    ^ ==> ^.

hash initialization:
    %Foo = {0=>0, 1=>0} ==> %Foo = (0=>0, 1=>0) 

Passing a code reference needs explicit 'sub': [057/1/mark-anderson.raku]
    permute { push @permutations, \@_; } ==>  permute sub { push @permutations, \@_; }

Argument "" isn't numeric [044/1/darren-bottin.pl]
    $sum += $_ ==> $sum += $_ if $ ne ''

'Useless use' warnings: [?]
    xxx

Rare Issues
===========

Filehandles can be undef: [088/2/polettix.pl]
    my $text = defined <$fh> or return

Parens needed to disambiguate precedence: [092/1/arne-sommer.pl]
    (0 .. length $A - 1) ==> (0 .. length($A) - 1) 

Module Issues
=============

Function::Parameters 
    obsolete for in-line subroutine args (no need for 'fun')
    still needed for 'method' [053/1/duncan-c-white.pl]

use Modern::Perl mostly obsolete, except for given/smartmatch (which are deprecated in any case):
    If using module for those, probably want:    no warnings 'experimental'
    If not using module, must explicitly enable: use feature 'switch';
    can interact badly with regard to prototypes [160/1/bruce-gray.pl]

Unresolved Issues
================

$$cache { $blah } //=  ...  [136/2/abigail.pl]

unstable output [058/1/mark-anderson*pl]

Seeing a CODE ref where there is none?  [170/1/perlboy1967.pl]
    Invalid CODE attribute: protoype($\@) at line 7.

