#!/usr/bin/env perl
!/usr/local/bin/perl

use strict;
use warnings;
use feature qw(say);
use Test::More;
use List::MoreUtils qw(slide);

my @TESTS = (
  [ [1,5,5,2,8], '5 5 2 8' ], #1 0 -1 1
  [ [2,6,8,5], '2 6 8' ], # 1 1 -1
  [ [9,8,13,13,2,2,15,17], '13 13 2 2 15 17' ], # 0 1 0 -1 0 1 1
  [ [2,1,2,1,3], '2 1 2'], # -1 1 -1 1
  [ [1,3,3,2,1,2,3,3,2],'3 3 2 1 2 3 3' ], # 1 0 -1 -1 1 1 0 -1
  [ [2,3,2,1], '3 2 1' ], # 1 -1 -1
  [ [(1) x 20,1..50,(50) x 20,reverse(1..50),(1)x 20,1..50,reverse(1..50),(1) x 10,1..50,(50)x 10],
    '50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 50']
);
is( "@{[ valley(  @{$_->[0]} ) ]}", $_->[1] ) for @TESTS2;
is( "@{[ valley2( @{$_->[0]} ) ]}", $_->[1] ) for @TESTS2;
done_testing();

cmpthese( -2, {
  1 => sub { valley(  @{$_->[0]} ) for @TESTS2 },
  2 => sub { valley2( @{$_->[0]} ) for @TESTS2 },
});


sub valley {
  my( $L, $R, @d )=( 0, 0, slide { $b <=> $a } @_ );
  for my $l ( 0 .. $#d-1) {
    my($x,$t) = ( $d[$l] || -1, $l );
    while($t++<$#d) {
      $d[$t] && ( $d[$t]<$x ? last : ($x=$d[$t]) )
    }
    ($L,$R)=($l,$t) if $R-$L<$t-$l;
  }
  @_[$L..$R];
}

sub valley2 {
  my( $pd, $s, $s2, $S, $E, $d ) = (0) x 5;
  for( 0 .. $#_-1 ) {
    $d  = $_[ $_+1 ] - $_[ $_ ];
    $s2 = $_                                                        if $pd > 0 && $d  <= 0; ## Start of plateau
    ( $_-$s > $E-$S ) && ( ( $S, $E ) = ( $s, $_ ) ) , ( $s = $s2 ) if $d  < 0 && $pd >= 0; ## End of plateau
    $pd = $d;
  }
  @_-$s2 > $E-$S+1 ? @_[ $s2 .. $#_ ] : @_[ $S .. $E ];
}
